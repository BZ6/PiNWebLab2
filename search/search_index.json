{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome GitHub Repository","title":"Home"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#github","text":"Repository","title":"GitHub"},{"location":"task1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430 : \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. asyncio import asyncio from consts import MAX_NUMBER, NUM_TASKS from utils import timer_decorator, get_end_index async def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total async def main(): tasks = [] chunk_size = MAX_NUMBER // NUM_TASKS @timer_decorator(\"async\") async def exec(): for i in range(NUM_TASKS): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_TASKS) task = asyncio.create_task(calculate_sum(start, end)) tasks.append(task) results = await asyncio.gather(*tasks) return sum(results) await exec() if __name__ == \"__main__\": asyncio.run(main()) multiprocessing import multiprocessing from consts import MAX_NUMBER, NUM_PROCESSES from utils import timer_decorator, get_end_index def calculate_sum(start, end, result_queue): total = 0 for i in range(start, end): total += i result_queue.put(total) def main(): processes = [] result_queue = multiprocessing.Queue() chunk_size = MAX_NUMBER // NUM_PROCESSES @timer_decorator(\"multiprocessing\") def exec(): for i in range(NUM_PROCESSES): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_PROCESSES) process = multiprocessing.Process(target=calculate_sum, args=(start, end, result_queue)) processes.append(process) for process in processes: process.start() for process in processes: process.join() total_sum = 0 while not result_queue.empty(): total_sum += result_queue.get() return total_sum exec() if __name__ == \"__main__\": main() threading import threading from consts import MAX_NUMBER, NUM_THREADS from utils import timer_decorator, get_end_index def calculate_sum(start, end, result, index): total = 0 for i in range(start, end): total += i result[index] = total def main(): threads = [] result = [0] * NUM_THREADS chunk_size = MAX_NUMBER // NUM_THREADS @timer_decorator(\"threading\") def exec(): for i in range(NUM_THREADS): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_THREADS) thread = threading.Thread(target=calculate_sum, args=(start, end, result, i)) threads.append(thread) for thread in threads: thread.start() for thread in threads: thread.join() return sum(result) exec() if __name__ == \"__main__\": main() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0414\u043b\u044f 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u0414\u043b\u044f 10 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0412\u044b\u0432\u043e\u0434 \u0414\u043b\u044f \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c multiprocessing, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043e\u0431\u0445\u043e\u0434\u0438\u0442 GIL \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u044f\u0434\u0440\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0434\u043b\u044f 10 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432. \u041d\u043e \u043a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0434\u043b\u044f \u043d\u0435\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u043e\u0438\u0442 \u0431\u0440\u0430\u0442\u044c \u0443\u0436\u0435 async \u0438\u043b\u0438 threading (\u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f), \u0442\u0430\u043a \u043a\u0430\u043a, \u0432\u0438\u0434\u0438\u043c\u043e, \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0442\u0440\u0430\u0442\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0434\u043b\u044f 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430.","title":"Task 1"},{"location":"task1/#1-threading-multiprocessing-async-python","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 10000000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python"},{"location":"task1/#asyncio","text":"import asyncio from consts import MAX_NUMBER, NUM_TASKS from utils import timer_decorator, get_end_index async def calculate_sum(start, end): total = 0 for i in range(start, end): total += i return total async def main(): tasks = [] chunk_size = MAX_NUMBER // NUM_TASKS @timer_decorator(\"async\") async def exec(): for i in range(NUM_TASKS): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_TASKS) task = asyncio.create_task(calculate_sum(start, end)) tasks.append(task) results = await asyncio.gather(*tasks) return sum(results) await exec() if __name__ == \"__main__\": asyncio.run(main())","title":"asyncio"},{"location":"task1/#multiprocessing","text":"import multiprocessing from consts import MAX_NUMBER, NUM_PROCESSES from utils import timer_decorator, get_end_index def calculate_sum(start, end, result_queue): total = 0 for i in range(start, end): total += i result_queue.put(total) def main(): processes = [] result_queue = multiprocessing.Queue() chunk_size = MAX_NUMBER // NUM_PROCESSES @timer_decorator(\"multiprocessing\") def exec(): for i in range(NUM_PROCESSES): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_PROCESSES) process = multiprocessing.Process(target=calculate_sum, args=(start, end, result_queue)) processes.append(process) for process in processes: process.start() for process in processes: process.join() total_sum = 0 while not result_queue.empty(): total_sum += result_queue.get() return total_sum exec() if __name__ == \"__main__\": main()","title":"multiprocessing"},{"location":"task1/#threading","text":"import threading from consts import MAX_NUMBER, NUM_THREADS from utils import timer_decorator, get_end_index def calculate_sum(start, end, result, index): total = 0 for i in range(start, end): total += i result[index] = total def main(): threads = [] result = [0] * NUM_THREADS chunk_size = MAX_NUMBER // NUM_THREADS @timer_decorator(\"threading\") def exec(): for i in range(NUM_THREADS): start = i * chunk_size + 1 end = get_end_index(i, chunk_size, NUM_THREADS) thread = threading.Thread(target=calculate_sum, args=(start, end, result, i)) threads.append(thread) for thread in threads: thread.start() for thread in threads: thread.join() return sum(result) exec() if __name__ == \"__main__\": main()","title":"threading"},{"location":"task1/#_1","text":"\u0414\u043b\u044f 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u0414\u043b\u044f 10 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"task1/#_2","text":"\u0414\u043b\u044f \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c multiprocessing, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043e\u0431\u0445\u043e\u0434\u0438\u0442 GIL \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u044f\u0434\u0440\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0434\u043b\u044f 10 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432. \u041d\u043e \u043a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0434\u043b\u044f \u043d\u0435\u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u043e\u0438\u0442 \u0431\u0440\u0430\u0442\u044c \u0443\u0436\u0435 async \u0438\u043b\u0438 threading (\u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f), \u0442\u0430\u043a \u043a\u0430\u043a, \u0432\u0438\u0434\u0438\u043c\u043e, \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0442\u0440\u0430\u0442\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435 \u0434\u043b\u044f 1 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"task2/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430 : \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. models from sqlmodel import Field, SQLModel class WebPage(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) url: str title: str parse and save for async from bs4 import BeautifulSoup from connection_async import SessionLocal_async from models import WebPage async def parse_and_save_async(url, session): try: async with session.get(url) as response: text = await response.text() soup = BeautifulSoup(text, 'html.parser') title = soup.title.string if soup.title else 'No title' async with SessionLocal_async() as db_session: page = WebPage(url=url, title=title) db_session.add(page) await db_session.commit() print(f\"Parsed: {url}: {title}\") except Exception as e: print(f\"Error parsing {url}: {e}\") asyncio import aiohttp import asyncio import time from urls import urls from parse_and_save_async import parse_and_save_async from connection_async import init_db_async async def main(): await init_db_async() async with aiohttp.ClientSession() as session: tasks = [parse_and_save_async(url, session) for url in urls] await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.run(main()) end_time = time.time() print(f\"Async execution time: {end_time - start_time} seconds\") parse and save from bs4 import BeautifulSoup import requests from connection import SessionLocal from models import WebPage def parse_and_save(url): try: response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string if soup.title else 'No title' with SessionLocal() as session: page = WebPage(url=url, title=title) session.add(page) session.commit() print(f\"Parsed: {url}: {title}\") except Exception as e: print(f\"Error parsing {url}: {e}\") multiprocessing import multiprocessing import time from connection import init_db from urls import urls from parse_and_save import parse_and_save def main(): init_db() processes = [] start_time = time.time() for url in urls: process = multiprocessing.Process(target=parse_and_save, args=(url,)) processes.append(process) for process in processes: process.start() for process in processes: process.join() end_time = time.time() print(f\"Multiprocessing execution time: {end_time - start_time} seconds\") if __name__ == \"__main__\": main() threading import threading import time from connection import init_db from urls import urls from parse_and_save import parse_and_save def main(): init_db() threads = [] start_time = time.time() for url in urls: thread = threading.Thread(target=parse_and_save, args=(url,)) threads.append(thread) for thread in threads: thread.start() for thread in threads: thread.join() end_time = time.time() print(f\"Threading execution time: {end_time - start_time} seconds\") if __name__ == \"__main__\": main() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u044f\u0442\u0438 \u0441\u0430\u0439\u0442\u043e\u0432 \u0412\u044b\u0432\u043e\u0434 \u0422\u0443\u0442 \u0443\u0436\u0435 \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 async \u0438 threading \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u0430 multiprocessing \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e \u043d\u0438\u0437\u043a\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435 \u0431\u044b\u043b\u043e, \u043d\u043e \u0434\u043b\u044f 5 \u0441\u0430\u0439\u0442\u043e\u0432 \u0432\u044b\u0448\u0435\u043b \u0432\u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u0445\u043e\u0434 threading, \u0447\u0442\u043e \u044f \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0442\u0430\u043a \u0438 \u043d\u0435 \u0441\u043c\u043e\u0433, \u0442\u0430\u043a \u043a\u0430\u043a \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u0441\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0436\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0432, \u044f \u0443\u0437\u043d\u0430\u043b, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043d\u0430 aiohttp \u0438 \u0438\u0445 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0435 \u0443\u0447\u0435\u0441\u0442\u044c. \u0413\u0434\u0435-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0430 \u0433\u0434\u0435-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u043f\u0440\u043e\u043a\u0441\u0438 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u043c\u0435\u0434\u043b\u0438\u0442\u044c, \u0445\u043e\u0442\u044f \u044f \u0435\u0433\u043e \u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b, \u043d\u043e \u0432\u0441\u0435 \u0436\u0435, \u043a\u0430\u043a \u0444\u0430\u043a\u0442.","title":"Task 2"},{"location":"task2/#2-","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"task2/#models","text":"from sqlmodel import Field, SQLModel class WebPage(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) url: str title: str","title":"models"},{"location":"task2/#parse-and-save-for-async","text":"from bs4 import BeautifulSoup from connection_async import SessionLocal_async from models import WebPage async def parse_and_save_async(url, session): try: async with session.get(url) as response: text = await response.text() soup = BeautifulSoup(text, 'html.parser') title = soup.title.string if soup.title else 'No title' async with SessionLocal_async() as db_session: page = WebPage(url=url, title=title) db_session.add(page) await db_session.commit() print(f\"Parsed: {url}: {title}\") except Exception as e: print(f\"Error parsing {url}: {e}\")","title":"parse and save for async"},{"location":"task2/#asyncio","text":"import aiohttp import asyncio import time from urls import urls from parse_and_save_async import parse_and_save_async from connection_async import init_db_async async def main(): await init_db_async() async with aiohttp.ClientSession() as session: tasks = [parse_and_save_async(url, session) for url in urls] await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.run(main()) end_time = time.time() print(f\"Async execution time: {end_time - start_time} seconds\")","title":"asyncio"},{"location":"task2/#parse-and-save","text":"from bs4 import BeautifulSoup import requests from connection import SessionLocal from models import WebPage def parse_and_save(url): try: response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.title.string if soup.title else 'No title' with SessionLocal() as session: page = WebPage(url=url, title=title) session.add(page) session.commit() print(f\"Parsed: {url}: {title}\") except Exception as e: print(f\"Error parsing {url}: {e}\")","title":"parse and save"},{"location":"task2/#multiprocessing","text":"import multiprocessing import time from connection import init_db from urls import urls from parse_and_save import parse_and_save def main(): init_db() processes = [] start_time = time.time() for url in urls: process = multiprocessing.Process(target=parse_and_save, args=(url,)) processes.append(process) for process in processes: process.start() for process in processes: process.join() end_time = time.time() print(f\"Multiprocessing execution time: {end_time - start_time} seconds\") if __name__ == \"__main__\": main()","title":"multiprocessing"},{"location":"task2/#threading","text":"import threading import time from connection import init_db from urls import urls from parse_and_save import parse_and_save def main(): init_db() threads = [] start_time = time.time() for url in urls: thread = threading.Thread(target=parse_and_save, args=(url,)) threads.append(thread) for thread in threads: thread.start() for thread in threads: thread.join() end_time = time.time() print(f\"Threading execution time: {end_time - start_time} seconds\") if __name__ == \"__main__\": main()","title":"threading"},{"location":"task2/#_1","text":"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u044f\u0442\u0438 \u0441\u0430\u0439\u0442\u043e\u0432","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"task2/#_2","text":"\u0422\u0443\u0442 \u0443\u0436\u0435 \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 async \u0438 threading \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u0430 multiprocessing \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e \u043d\u0438\u0437\u043a\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435 \u0431\u044b\u043b\u043e, \u043d\u043e \u0434\u043b\u044f 5 \u0441\u0430\u0439\u0442\u043e\u0432 \u0432\u044b\u0448\u0435\u043b \u0432\u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u0445\u043e\u0434 threading, \u0447\u0442\u043e \u044f \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0442\u0430\u043a \u0438 \u043d\u0435 \u0441\u043c\u043e\u0433, \u0442\u0430\u043a \u043a\u0430\u043a \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u0441\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0436\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0432, \u044f \u0443\u0437\u043d\u0430\u043b, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043d\u0430 aiohttp \u0438 \u0438\u0445 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0435 \u0443\u0447\u0435\u0441\u0442\u044c. \u0413\u0434\u0435-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0430 \u0433\u0434\u0435-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u043f\u0440\u043e\u043a\u0441\u0438 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u043c\u0435\u0434\u043b\u0438\u0442\u044c, \u0445\u043e\u0442\u044f \u044f \u0435\u0433\u043e \u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b, \u043d\u043e \u0432\u0441\u0435 \u0436\u0435, \u043a\u0430\u043a \u0444\u0430\u043a\u0442.","title":"\u0412\u044b\u0432\u043e\u0434"}]}